{"version":3,"sources":["Tabs/Options.js","Components/TsvDialog.js","Components/DeleteAllDialog.js","Components/DeleteDialog.js","Components/RegisterTable.js","Tabs/BaseRegisters.js","Tabs/Inputs.js","Tabs/Outputs.js","Tabs/Marker.js","Tabs/DBs.js","App.js","serviceWorker.js","index.js"],"names":["FileInput","props","enqueueSnackbar","useSnackbar","onDrop","useCallback","acceptedFiles","onChange","I18n","t","useDropzone","accept","getRootProps","getInputProps","isDragActive","FormControl","style","padding","paddingRight","Typography","variant","gutterBottom","label","className","classes","fileInput","backgroundColor","cursor","Options","inputDisabled","input","inputDisplay","native","params","slot","includes","name","timeFormat","changeParam","value","JSON","parse","stringify","localTSAP","remoteTSAP","rack","changeNative","loadSymbols","e","reader","FileReader","onload","localData","inputs","outputs","markers","text","result","split","forEach","line","typ","slice","replace","d","Name","Address","Type","Description","Unit","poll","RW","WP","push","table","readAsText","addDb","setTimeout","changes","dbs","newParts","indexOf","lines","mapping","attr","process","f","db","trim","match","m","parseInt","undefined","offset","sFields","fields","length","l","obj","Role","Room","console","log","Length","_attr","error","aaa","mm","vv","item","x","shift","dec","join","hasOwnProperty","sort","a","b","aDB","bDB","aOffset","bOffset","state","this","title","Paper","optionsContainer","header","Grid","container","spacing","direction","map","type","optionContainer","FormControlLabel","control","Checkbox","optionsCheckbox","disabled","checked","getValue","target","dimension","InputLabel","shrink","Select","optionsSelect","displayEmpty","options","option","MenuItem","top","bottom","optionsLabel","Input","width","toString","toUpperCase","marginLeft","TextField","optionsTextField","InputProps","endAdornment","InputAdornment","position","Box","tab","xs","md","optionsGrid","getInputsBlock","connectionInputs","getImportsBlock","generalInputs","Component","withStyles","theme","marginBottom","display","textAlign","fontSize","height","border","borderRadius","marginTop","tsvEditor","tsvEditorTextarea","fontFamily","useState","tsv","setTsv","useEffect","tsvResult","field","data","json2tsv","open","Dialog","onClose","maxWidth","fullWidth","DialogTitle","DialogContent","DialogContentText","showPrintMargin","setOptions","firstLineNumber","mode","DialogActions","Button","color","onClick","copy","startIcon","tsv2json","endsWith","success","errors","index","itemValues","itemIndex","save","DeleteAllDialog","action","DeleteDialog","disableWarnings","setDisableWarnings","_address","DataCell","sortedItem","editMode","setEditMode","ref","useRef","Tooltip","inputRef","tableCheckbox","getDisable","$index","list","rooms","allowNone","dense","themeType","inputProps","tableSelect","tableSelectContainer","find","tableTextFieldContainer","tableTextField","TableCell","Utils","clsx","tableCell","nonEditMode","window","localStorage","setItem","current","focus","tableHeader","whiteSpace","fontWeight","tableHeaderExtended","palette","primary","light","dark","tableContainer","overflow","maxHeight","tsvDialogOpen","setTsvDialogOpen","getItem","extendedMode","setExtendedMode","deleteAllDialog","setDeleteAllDialog","deleteDialog","setDeleteDialog","sortedData","getSortedData","orderBy","order","IconButton","addItem","Table","size","stickyHeader","TableHead","TableRow","filter","expert","formulaDisabled","isChecked","indeterminate","trueFound","falseFound","k","tooltip","newData","changeData","sorted","TableSortLabel","active","isAsc","onChangeOrder","TableBody","hover","lastTime","sessionStorage","Date","deleteItem","disableDialogs","toISOString","prefix","startsWith","BaseRegisters","nativeField","struct","address2struct","bit","struct2address","byte","newItem","getFields","item1","item2","lastItem","role","splice","sortedItem1","sortedItem2","sort1","sort2","a1","a2","lang","getLanguage","Object","values","room","_id","common","getRooms","unshift","types","roles","multiDeviceId","address","parts","parseFloat","Math","floor","setState","Inputs","propTypes","PropTypes","object","isRequired","instance","number","adapterName","string","onError","func","onLoad","changed","bool","socket","Outputs","Marker","Dbs","tabs","component","TabOptions","TabInputs","TabOutputs","TabMarker","App","extendedProps","encryptedFields","translations","require","moreLoaded","getForeignObjects","then","selectedTab","findIndex","loaded","background","default","AppBar","Tabs","getSelectedTab","selectTab","scrollButtons","Tab","icon","data-name","isIFrame","tabContentIFrame","tabContent","TabComponent","errorText","onLoadConfig","cb","updateNativeValue","getIsChanged","renderError","renderSaveCloseButtons","GenericApp","root","minHeight","Boolean","location","hostname","themeName","getThemeName","version","build","ReactDOM","render","onThemeChange","_theme","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.255f9c57.chunk.js","sourcesContent":["import {Component, useCallback} from 'react';\nimport {useDropzone} from 'react-dropzone';\nimport { useSnackbar } from 'notistack';\nimport PropTypes from 'prop-types';\nimport {withStyles} from '@material-ui/core/styles';\n\nimport Typography from '@material-ui/core/Typography';\nimport TextField from '@material-ui/core/TextField';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport Select from '@material-ui/core/Select';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport FormControl from '@material-ui/core/FormControl';\nimport Input from '@material-ui/core/Input';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport InputAdornment from '@material-ui/core/InputAdornment';\nimport Grid from '@material-ui/core/Grid';\nimport Paper from '@material-ui/core/Paper';\nimport Box from '@material-ui/core/Box';\n\nimport I18n from '@iobroker/adapter-react/i18n';\n\nimport connectionInputs from '../data/optionsConnection';\nimport generalInputs from '../data/optionsGeneral';\n\nconst styles = theme => ({\n    optionsSelect: {\n        width: 280\n    },\n    optionsTextField: {\n        width: 280\n    },\n    optionContainer: {\n    },\n    optionsContainer: {\n        width: `calc(100% - ${theme.spacing(4)}px)`,\n        padding: theme.spacing(2),\n        marginBottom: 20,\n        display: 'inline-block',\n        textAlign: 'left'\n    },\n    optionsGrid: {\n        textAlign: 'center',\n        padding: theme.spacing(2),\n    },\n    optionsLabel: {\n        fontSize: 12,\n    },\n    header: {\n        fontSize: 24,\n    },\n    fileInput: {\n        textAlign: 'center',\n        display: 'inline-block',\n        height: 80,\n        width: 200,\n        border: '2px dashed #777',\n        borderRadius: 10,\n        marginTop: 12,\n        padding: 4\n    }\n});\n\nlet FileInput = function (props) {\n    const { enqueueSnackbar } = useSnackbar();\n    const onDrop = useCallback(acceptedFiles => {\n        props.onChange(acceptedFiles);\n        enqueueSnackbar(I18n.t('Data updated'));\n    }, []); // eslint-disable-line react-hooks/exhaustive-deps\n\n      const {getRootProps, getInputProps, isDragActive} = useDropzone({onDrop, accept: props.accept});\n\n      return <FormControl style={{padding: 3, paddingRight: 40}}>\n        <Typography variant=\"h6\" gutterBottom>{ I18n.t(props.label)}</Typography>\n        <div {...getRootProps()} className={props.classes.fileInput} style={isDragActive ? {backgroundColor: 'rgba(0, 255, 0, 0.1)'} : {cursor: 'pointer'}}>\n            <input {...getInputProps()} />\n            {\n                isDragActive ?\n                <p>{I18n.t('Drop the file here ...')}</p> :\n                <p>{I18n.t(`Drag 'n' drop file here, or click to select file`)}</p>\n            }\n        </div>\n    </FormControl>;\n};\n\nclass Options extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n        };\n    }\n\n    getValue(name) {\n        if (name === 's7logo') {\n            return this.props.native.params.slot === null;\n        }\n        return this.props.native.params[name];\n    }\n\n    inputDisabled = input => {\n        return false;\n    }\n\n    inputDisplay = input => {\n        if (this.props.native.params.slot === null) {\n            if (['rack', 'slot'].includes(input.name)) {\n                return false;\n            }\n        } else {\n            if (['localTSAP', 'remoteTSAP'].includes(input.name)) {\n                return false;\n            }\n        }\n        if (input.name === 'timeOffset') {\n            return ['summer', 'offset'].includes(this.props.native.params.timeFormat);\n        }\n        return true;\n    }\n\n    getInputsBlock(inputs, title) {\n        return <Paper className={this.props.classes.optionsContainer}>\n            <Typography variant=\"h4\" gutterBottom className={this.props.classes.header}>{I18n.t(title)}</Typography>\n            <Grid container spacing={2} direction=\"column\">\n                {inputs.map(input => {\n                    if (!this.inputDisplay(input)) {\n                        return null;\n                    }\n                    if (input.type === 'checkbox') {\n                        return <Grid item className={this.props.classes.optionContainer} key={input.name}>\n                            <FormControlLabel\n                                label={I18n.t(input.title)}\n                                control={<Checkbox\n                                    label={I18n.t(input.title)}\n                                    className={this.props.classes.optionsCheckbox}\n                                    disabled={this.inputDisabled(input)}\n                                    checked={this.getValue(input.name)}\n                                    onChange={e => this.changeParam(input.name, e.target.checked)}\n                                />}/> {input.dimension ? I18n.t(input.dimension) : null}</Grid>;\n                    } else if (input.type === 'select') {\n                        return <Grid item className={this.props.classes.optionContainer} key={input.name}>\n                            <FormControl>\n                                <InputLabel shrink>{I18n.t(input.title)}</InputLabel>\n                                <Select\n                                    className={this.props.classes.optionsSelect}\n                                    displayEmpty\n                                    disabled={this.inputDisabled(input)}\n                                    value={this.getValue(input.name)}\n                                    onChange={e => this.changeParam(input.name, e.target.value)}\n                                >\n                                    {input.options.map(option =>\n                                        <MenuItem key={option.value} value={option.value}>{option.title}</MenuItem>\n                                    )}\n                                </Select>\n                            </FormControl> {input.dimension ? I18n.t(input.dimension) : null}\n                        </Grid>;\n                    } else if (input.type === 'hex') {\n                        let value = parseInt(this.getValue(input.name)) ? parseInt(this.getValue(input.name)) : 0;\n                        let top = (value >> 8) & 0xFF;\n                        let bottom = value & 0xFF;\n\n                        return <Grid item className={this.props.classes.optionContainer} key={input.name}>\n                            <InputLabel className={this.props.classes.optionsLabel}>{I18n.t(input.title)}</InputLabel>\n                            <Input\n                                title={I18n.t('Connection type: 0x1 - PG, 0x2 - OP, 0x3-0x10 - S7 Basic')}\n                                style={{width: '6ch'}}\n                                value={top.toString(16) ? top.toString(16).toUpperCase() : 0}\n                               onChange={e => {\n                                   if (parseInt(e.target.value, 16) > 0xFF || parseInt(e.target.value, 16) < 0) {\n                                       return;\n                                   }\n                                   this.changeParam(input.name, (parseInt(e.target.value, 16) << 8) | bottom);\n                               }}\n                            />\n                            <Input\n                                title={I18n.t('Rack and slot: [Rack * 0x20 + Slot]')}\n                                style={{marginLeft: 5, width: '6ch'}}\n                                value={bottom.toString(16) ? bottom.toString(16).toUpperCase() : 0}\n                                onChange={e => {\n                                    if (parseInt(e.target.value, 16) > 0xFF || parseInt(e.target.value, 16) < 0) {\n                                        return;\n                                    }\n                                    this.changeParam(input.name, (top << 8) | parseInt(e.target.value, 16));\n                                }}\n                            />\n                        </Grid>;\n                    } else {\n                        return <Grid item className={this.props.classes.optionContainer} key={input.name}><TextField\n                            type={input.type}\n                            label={I18n.t(input.title)}\n                            className={this.props.classes.optionsTextField}\n                            disabled={this.inputDisabled(input)}\n                            value={this.getValue(input.name)}\n                            InputProps={{\n                                endAdornment: input.dimension ?\n                                    <InputAdornment position=\"end\">{I18n.t(input.dimension)}</InputAdornment> : null\n                            }}\n                            onChange={e => this.changeParam(input.name, e.target.value)}\n                        /></Grid>;\n                    }\n                })}\n            </Grid>\n        </Paper>;\n    }\n\n    getImportsBlock() {\n        return <><Paper className={this.props.classes.optionsContainer}>\n            <Typography variant=\"h4\" gutterBottom className={this.props.classes.header}>{I18n.t('Import')}</Typography>\n                <Box className={this.props.classes.optionContainer}>\n                <FileInput classes={this.props.classes} onChange={this.loadSymbols} label=\"Load symbols\" accept=\".asc\"/>\n                <FileInput classes={this.props.classes} onChange={this.addDb} label=\"Add DB\" accept=\".csv,.prn\"/>\n                </Box>\n        </Paper></>;\n    }\n\n    render() {\n        return <form className={ this.props.classes.tab }>\n            <Grid container spacing={2} >\n                <Grid item xs={12} md={6} className={ this.props.classes.optionsGrid }>\n                    {this.getInputsBlock(connectionInputs, 'PLC Connection')}\n                    {this.getImportsBlock()}\n                </Grid>\n                <Grid item xs={12} md={6} className={ this.props.classes.optionsGrid }>{this.getInputsBlock(generalInputs, 'General')}</Grid>\n            </Grid>\n        </form>;\n    }\n\n    changeParam = (name, value) => {\n        let native = JSON.parse(JSON.stringify(this.props.native));\n        if (name === 's7logo') {\n            if (value) {\n                native.params.localTSAP = '';\n                native.params.remoteTSAP = '';\n                native.params.rack = null;\n                native.params.slot = null;\n            } else {\n                native.params.localTSAP = null;\n                native.params.remoteTSAP = null;\n                native.params.rack = '';\n                native.params.slot = '';\n            }\n        } else {\n            native.params[name] = value;\n        }\n        this.props.changeNative(native);\n    }\n\n    loadSymbols = e => {\n        let native = JSON.parse(JSON.stringify(this.props.native));\n        const reader = new FileReader();\n\n        reader.onload = e => {\n            const localData = {\n                inputs:  [],\n                outputs: [],\n                markers: []\n//                counter: [],\n//                timer: [],\n//                dbs: []\n            };\n            let text = reader.result;\n\n            text = text.split('126,');\n            text.forEach(line => {\n                const typ = line.slice(23, 29).replace(/( )/g, '');\n\n                const d = {\n                    Name:         line.slice(0, 23).replace(/( ){2,}/g, ''),\n                    Address:      line.slice(29, 36).replace(/( )/g, ''),\n                    Type:         line.slice(36, 41).replace(/( )/g, ''),\n                    Description:  line.slice(46, 126).replace(/( ){2,}/, ''),\n                    Unit:         '',\n//                    Role:         '',\n//                    Room:         '',\n                    poll:         true,\n                    RW:           false,\n                    WP:           false\n                };\n\n//                    if (typ == 'E' || typ == 'EB' ||typ == 'EW' ||typ == 'ED'||typ == 'PEB'||typ == 'PEW'||typ == 'PED')data.inputs.push(d);\n//                    if (typ == 'A' || typ == 'AB' ||typ == 'AW' ||typ == 'AD'||typ == 'PAB'||typ == 'PAW'||typ == 'PAD')data.outputs.push(d);\n                if (typ === 'E' || typ === 'EB' || typ === 'EW' || typ === 'ED') localData.inputs.push(d);\n                if (typ === 'A' || typ === 'AB' || typ === 'AW' || typ === 'AD') localData.outputs.push(d);\n                if (typ === 'M' || typ === 'MB' || typ === 'MW' || typ === 'MD') localData.markers.push(d);\n//                if (typ == 'C')data.counter.push(d);\n//                if (typ == 'T')data.timer.push(d);\n//                if (typ == 'DB')data.dbs.push(d);\n            });\n\n            ['inputs', 'outputs', 'markers'].forEach(table => {\n                native[table] = localData[table];\n            });\n            this.props.changeNative(native);\n        };\n\n        reader.readAsText(e[0], 'ISO-8859-1');\n    }\n\n    addDb = e => {\n        let native = JSON.parse(JSON.stringify(this.props.native));\n        const reader = new FileReader();\n\n        reader.onload = e => {\n            setTimeout(function () {\n                const text       = reader.result;\n                const changes  = {\n                    inputs: false,\n                    outputs: false,\n                    markers: false,\n                    dbs: false\n                };\n                const newParts = {\n                    inputs:     native.inputs || [],\n                    outputs:    native.outputs || [],\n                    markers:    native.markers || [],\n                    dbs:        native.dbs || []\n                };\n\n                if (text.indexOf('Leseanforderung') !== -1) {\n                    // Graphpic format\n                    const lines = text.replace(/\\r\\n/g, '\\n').split('\\n');\n                    const mapping = {\n                        'Name':             {attr: 'Name'},\n                        'Typ':              {attr: ''},\n                        'Operand':          {attr: 'Address',       process: f => {\n                            // DB 504.DBW 1462 => DB504 1462\n                            f = f.trim();\n                            const db     = f.match(/^DB (\\d+)/);\n                            if (!db) {\n                                // M\n                                // MB\n                                let m = f.match(/^MB? (\\d+)\\.?(\\d+)?$/);\n                                if (m) {\n                                    return 'M ' + parseInt(m[1], 10) + (m[2] !== undefined ? '.' + m[2] : '');\n                                } else {\n                                    m = f.match(/^AB? (\\d+)\\.?(\\d+)?$/);\n                                    if (m) {\n                                        return 'OUT ' + parseInt(m[1], 10) + (m[2] !== undefined ? '.' + m[2] : '');\n                                    } else {\n                                        m = f.match(/^EB? (\\d+)\\.?(\\d+)?$/);\n                                        if (m) {\n                                            return 'IN ' + parseInt(m[1], 10) + (m[2] !== undefined ? '.' + m[2] : '');\n                                        } else {\n                                            return f;\n                                        }\n                                    }\n                                }\n                            }\n\n                            const offset = f.match(/(\\d+).?(\\d+)?$/);\n                            if (db && offset) {\n                                return `DB${db[1]} ${offset[1]}${offset[2] !== undefined ? '.' + offset[2] : ''}`;\n                            } else {\n                                return f;\n                            }\n                        }},\n                        'SPS-Format':       {attr: 'Type',          process: function (f) {return f;} },\n                        'Byteanzahl':       {attr: 'Length',        process: function (f) {return parseInt(f, 10);} },\n                        'Zugriff':          {attr: 'RW',            process: function (f) {return f !== 'read';} },\n                        'Leseanforderung':  {attr: 'poll',          process: function (f) {return f === 'zyklisch';} },\n                        'AktZeit (ms)':     {attr: ''},\n                        'Kommentar':        {attr: 'Description'},\n                        'Clients (Anzahl)': {attr: ''}\n                    };\n                    // First line\n                    // \"Name\",\"Typ\",\"Operand\",\"SPS-Format\",\"Byteanzahl\",\"Zugriff\",\"Leseanforderung\",\"AktZeit (ms)\",\"Kommentar\",\"Clients (Anzahl)\"\n                    let sFields = lines[0].split(',');\n                    // create mapping\n                    const fields = [];\n                    for (let m = 0; m < sFields.length; m++) {\n                        sFields[m] = sFields[m].replace(/\"/g, '');\n                        fields.push(mapping[sFields[m]]);\n                    }\n                    for (let l = 1; l < lines.length; l++) {\n                        lines[l] = lines[l].trim();\n                        if (!lines[l]) continue;\n                        sFields = lines[l].trim().split(',');\n                        let obj = {\n                            Type:           'ARRAY',\n                            Unit:           '',\n                            Role:           '',\n                            Room:           '',\n                            poll:           true,\n                            RW:             false,\n                            WP:             false\n                        };\n                        for (let f = 0; f < fields.length; f++) {\n                            if (!fields[f].attr) {\n                                continue;\n                            }\n                            if (!sFields[f]) {\n                                console.log('error');\n                                break;\n                            }\n                            sFields[f] = sFields[f].replace(/\"/g, '');\n                            obj[fields[f].attr] = fields[f].process ? fields[f].process(sFields[f]) : sFields[f];\n\n                            if (obj.Name.match(/^@/)) {\n                                obj = null;\n                                break;\n                            }\n                        }\n                        if (obj) {\n                            if (obj.Type === 'BYTE' && obj.Length !== 1) {\n                                obj.Type = 'ARRAY';\n                            }\n                            if (obj.Type === 'CHAR') {\n                                obj.Type = 'STRING';\n                            }\n                            if (obj.Type === 'BYTE' || obj.Type === 'BOOL' || obj.Type === 'INT') {\n                                obj.Length = '';\n                            }\n                            let _attr;\n                            if (obj.Address.match(/^DB/)) {\n                                _attr = 'dbs';\n                            } else if (obj.Address.match(/^IN/)) {\n                                obj.Address = obj.Address.replace(/^IN\\s?/, '');\n                                _attr = 'inputs';\n                            } else if (obj.Address.match(/^OUT/)) {\n                                _attr = 'outputs';\n                                obj.Address = obj.Address.replace(/^OUT\\s?/, '');\n                            } else if (obj.Address.match(/^M/)) {\n                                _attr = 'markers';\n                                obj.Address = obj.Address.replace(/^M\\s?/, '');\n                            } else {\n                                console.error('Unknown TYPE: ' + obj.Address);\n                                continue;\n                            }\n                            // try to find same address\n                            for (let aaa = 0; aaa < newParts[_attr].length; aaa++) {\n                                if (newParts[_attr][aaa].Address === obj.Address) {\n                                    newParts[_attr][aaa] = obj;\n                                    changes[_attr] = true;\n                                    obj = null;\n                                    break;\n                                }\n                            }\n                            if (obj) {\n                                changes[_attr] = true;\n                                newParts[_attr].push(obj);\n                            }\n                        }\n                    }\n                } else {\n                    const mm = text.match(/(DB)[0-9]+\\s-\\s/g);\n                    const db = mm ? mm[0].replace(' - ', '') : '';\n                    const vv = text.split('STRUCT');\n\n                    const struck = vv[1] ? vv[1].split('=')[0].split('\\n') : [];\n\n                    struck.forEach((item) => {\n                        if (item.length > 10) {\n                            const x = item.split(/\\s+/g);\n                            x.shift();\n\n                            let obj = {\n                                Address:        db + ' ' + x.shift(),\n                                Name:           x.shift(),\n                                Type:           x.shift(),\n                                dec:            x.shift(),\n                                Description:    x.join(' '),\n                                Unit:           '',\n                                Role:           '',\n                                Room:           '',\n                                poll:           true,\n                                RW:             false,\n                                WP:             false\n                            };\n\n                            // try to find same address\n                            for (let aaa = 0; aaa < newParts.dbs.length; aaa++) {\n                                if (newParts.dbs[aaa].Address === obj.Address) {\n                                    newParts.dbs[aaa] = obj;\n                                    changes.dbs = true;\n                                    obj = null;\n                                    break;\n                                }\n                            }\n                            if (obj) {\n                                changes.dbs = true;\n                                newParts.dbs.push(obj);\n                            }\n                        }\n                    });\n                }\n                for (const attr in newParts) {\n                    if (!newParts.hasOwnProperty(attr)) {\n                        continue;\n                    }\n                    newParts[attr].sort((a, b) => {\n                        const aDB = a.Address.match(/^D?B?\\s?(\\d+)/);\n                        const bDB = b.Address.match(/^D?B?\\s?(\\d+)/);\n                        if (!aDB) return -1;\n                        if (!bDB) return 1;\n                        if (parseInt(aDB[1], 10) > parseInt(bDB[1], 10)) return 1;\n                        if (parseInt(aDB[1], 10) < parseInt(bDB[1], 10)) return -1;\n                        const aOffset = a.Address.match(/\\s(\\d+).?(\\d+)?$/);\n                        const bOffset = b.Address.match(/\\s(\\d+).?(\\d+)?$/);\n                        if (!aOffset) return -1;\n                        if (!bOffset) return 1;\n                        if (parseInt(aOffset[1], 10) > parseInt(bOffset[1], 10)) return 1;\n                        if (parseInt(aOffset[1], 10) < parseInt(bOffset[1], 10)) return -1;\n                        if (aOffset[2] === undefined && bOffset[2] !== undefined) return 1;\n                        if (bOffset[2] === undefined && aOffset[2] !== undefined) return -1;\n                        if (aOffset[2] === undefined && bOffset[2] === undefined) return 0;\n                        if (parseInt(aOffset[2], 10) > parseInt(bOffset[2], 10)) return 1;\n                        if (parseInt(aOffset[2], 10) < parseInt(bOffset[1], 10)) return -1;\n                        return 0;\n                    });\n                }\n                if (changes.dbs) {\n                    native.dbs = newParts.dbs;\n                }\n                if (changes.inputs) {\n                    native.inputs = newParts.inputs;\n                }\n                if (changes.outputs) {\n                    native.outputs = newParts.outputs;\n                }\n                if (changes.markers) {\n                    native.markers = newParts.markers;\n                }\n                console.log(native);\n                //this.props.changeNative(native);\n            }, 200);\n        };\n\n        reader.readAsText(e[0], 'ISO-8859-1');\n    }\n}\n\nOptions.propTypes = {\n    common: PropTypes.object.isRequired,\n    native: PropTypes.object.isRequired,\n    instance: PropTypes.number.isRequired,\n    adapterName: PropTypes.string.isRequired,\n    onError: PropTypes.func,\n    onLoad: PropTypes.func,\n    onChange: PropTypes.func,\n    changed: PropTypes.bool,\n    socket: PropTypes.object.isRequired,\n};\n\nexport default withStyles(styles)(Options);\n","import { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport {withStyles} from '@material-ui/core/styles';\n\nimport { tsv2json, json2tsv } from 'tsv-json';\nimport { useSnackbar } from 'notistack';\nimport AceEditor from \"react-ace\";\nimport copy from 'copy-to-clipboard';\nimport I18n from '@iobroker/adapter-react/i18n';\n\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport Button from '@material-ui/core/Button';\n\nimport ClearIcon from '@material-ui/icons/Clear';\nimport SaveIcon from '@material-ui/icons/Save';\nimport FileCopyIcon from '@material-ui/icons/FileCopy';\n\nconst styles = theme => ({\n    tsvEditor: {\n        width: '100%',\n        height: 400\n    },\n    tsvEditorTextarea: {\n        fontFamily: 'monospace'\n    }\n});\n\nconst TsvDialog = props => {\n    const [tsv, setTsv] = useState('');\n    useEffect(() => {\n        let tsvResult = [];\n        tsvResult.push(props.fields.map(field => field.name));\n        props.data.forEach(item =>\n            tsvResult.push(props.fields.map(field => item[field.name] !== undefined && item[field.name] !== null ? item[field.name].toString() : ''))\n        );\n        setTsv(json2tsv(tsvResult));\n    }, [props.open]); // eslint-disable-line react-hooks/exhaustive-deps\n    const { enqueueSnackbar } = useSnackbar();\n\n    if (!props.open) {\n        return null;\n    }\n\n    const saveTsv = () => {\n        let data = tsv2json(tsv.endsWith('\\n') ? tsv : tsv + '\\n');\n        let fields = data.shift();\n        let success = true;\n        let errors = [];\n        for (let index in props.fields) {\n            if (props.fields[index].name !== fields[index]) {\n                errors.push(<>No field <i>{props.fields[index].name}</i> in position <i>{parseInt(index) + 1}</i>!</>);\n                success = false;\n            }\n        }\n\n        data = data.map((itemValues, itemIndex) => {\n            let item = {};\n            for (let index in props.fields) {\n                if (props.fields[index].type === 'select' && !props.fields[index].options.map(option => option.value).includes(itemValues[index])) {\n                    errors.push(<>Value <i>{itemValues[index]}</i> is wrong for field <i>{props.fields[index].name}</i> in position <i>{parseInt(itemIndex) + 1}</i>!</>);\n                    success = false;\n                }\n                if (props.fields[index].type === 'checkbox') {\n                    itemValues[index] = itemValues[index] === 'true';\n                }\n                item[props.fields[index].name] = itemValues[index];\n            }\n            return item;\n        });\n\n        if (!success) {\n            enqueueSnackbar(<div>{errors.map((error, index) => <div key={index}>{error}</div>)}</div>, { variant: 'error' });\n            return;\n        }\n        props.save(data);\n        props.onClose();\n    };\n\n    return <Dialog\n        open={props.open}\n        onClose={props.onClose}\n        maxWidth=\"lg\"\n        fullWidth\n    >\n        <DialogTitle>{I18n.t('Edit data as TSV')}</DialogTitle>\n        <DialogContent>\n            <DialogContentText>{I18n.t('You can copy, paste and edit data as TSV.')}</DialogContentText>\n            <div>\n                <AceEditor\n                    onChange={e => setTsv(e)}\n                    height=\"400px\"\n                    showPrintMargin={false}\n                    value={tsv}\n                    className={props.classes.tsvEditor}\n                    width=\"100%\"\n                    setOptions={{firstLineNumber: 0}}\n                    mode={null}\n                />\n            </div>\n        </DialogContent>\n        <DialogActions>\n            <Button variant=\"outlined\" color=\"primary\" onClick={() => {\n                //Utils.copyToClipboard(tsv);\n                copy(tsv);\n                enqueueSnackbar(I18n.t('TSV was copied to clipboard'));\n            }} startIcon={<FileCopyIcon />}>{I18n.t('Copy to clipboard')}</Button>\n            <Button variant=\"contained\" color=\"primary\" onClick={saveTsv} startIcon={<SaveIcon />}>{I18n.t('Import')}</Button>\n            <Button variant=\"contained\" onClick={props.onClose} startIcon={<ClearIcon />}>{I18n.t('Close')}</Button>\n        </DialogActions>\n    </Dialog>\n};\n\nTsvDialog.propTypes = {\n    open: PropTypes.bool,\n    onClose: PropTypes.func,\n    classes: PropTypes.object,\n    save: PropTypes.func,\n    fields: PropTypes.array,\n    data: PropTypes.array\n};\n\nexport default withStyles(styles)(TsvDialog);","import PropTypes from 'prop-types';\n\nimport I18n from '@iobroker/adapter-react/i18n';\n\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport Button from '@material-ui/core/Button';\n\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport ClearIcon from '@material-ui/icons/Clear';\n\nconst DeleteAllDialog = (props) => {\n    return props.open ? <Dialog open={props.open} onClose={props.onClose}>\n        <DialogTitle>{I18n.t('Delete all items')}</DialogTitle>\n        <DialogContent>\n            <DialogContentText>{I18n.t('Are you sure to delete all items?')}</DialogContentText>\n            <DialogActions>\n                <Button variant=\"contained\" color=\"secondary\" startIcon={<DeleteIcon />} onClick={() => {\n                    props.action();\n                    props.onClose();\n                }}>{I18n.t('Delete all items')}</Button>\n                <Button variant=\"contained\" onClick={props.onClose} startIcon={<ClearIcon />}>{I18n.t('Cancel')}</Button>\n            </DialogActions>\n        </DialogContent>\n    </Dialog> : null;\n}\n\nDeleteAllDialog.propTypes = {\n    open: PropTypes.bool,\n    action: PropTypes.func,\n    onClose: PropTypes.func,\n    classes: PropTypes.object,\n}\n\nexport default DeleteAllDialog;","import { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\n\nimport I18n from '@iobroker/adapter-react/i18n';\n\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport Button from '@material-ui/core/Button';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Checkbox from '@material-ui/core/Checkbox';\n\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport ClearIcon from '@material-ui/icons/Clear';\n\nconst DeleteDialog = (props) => {\n    const [disableWarnings, setDisableWarnings] = useState(false);\n    useEffect(() => {\n        setDisableWarnings(false);\n    }, [props.open]);\n\n    return props.open ? <Dialog open={props.open} onClose={props.onClose}>\n        <DialogTitle>{I18n.t('Delete item')}</DialogTitle>\n        <DialogContent>\n            <DialogContentText>{I18n.t('Are you sure to delete item with address \"%s\"?', props.item._address)}</DialogContentText>\n            <DialogContentText><FormControlLabel\n                label={I18n.t('Don\\'t show this message in 5 minutes')}\n                control={<Checkbox\n                    checked={disableWarnings}\n                    onChange={e => setDisableWarnings(e.target.checked)}\n            />}/></DialogContentText>\n            <DialogActions>\n                <Button variant=\"contained\" color=\"secondary\" startIcon={<DeleteIcon />} onClick={() => {\n                    props.action(disableWarnings);\n                    props.onClose();\n                }}>{I18n.t('Delete')}</Button>\n                <Button variant=\"contained\" onClick={props.onClose} startIcon={<ClearIcon />}>{I18n.t('Cancel')}</Button>\n            </DialogActions>\n        </DialogContent>\n    </Dialog> : null;\n}\n\nDeleteDialog.propTypes = {\n    open: PropTypes.bool,\n    onClose: PropTypes.func,\n    classes: PropTypes.object,\n    action: PropTypes.func,\n    item: PropTypes.object,\n}\n\nexport default DeleteDialog;","import { useState, useRef } from 'react';\nimport PropTypes from 'prop-types';\nimport {withStyles} from '@material-ui/core/styles';\n\nimport Table from '@material-ui/core/Table';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableRow from '@material-ui/core/TableRow';\nimport TableCell from '@material-ui/core/TableCell';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport TextField from '@material-ui/core/TextField';\nimport IconButton from '@material-ui/core/IconButton';\nimport Select from '@material-ui/core/Select';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport TableSortLabel from '@material-ui/core/TableSortLabel';\nimport Tooltip from '@material-ui/core/Tooltip';\n\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport AddIcon from '@material-ui/icons/Add';\nimport ImportExport from '@material-ui/icons/ImportExport';\n\nimport I18n from '@iobroker/adapter-react/i18n';\nimport Utils from '@iobroker/adapter-react/Components/Utils';\n\nimport ExpertIcon from '@iobroker/adapter-react/icons/IconExpert';\nimport TextWithIcon from '@iobroker/adapter-react/Components/TextWithIcon';\nimport SelectWithIcon from '@iobroker/adapter-react/Components/SelectWithIcon';\n\nimport TsvDialog from './TsvDialog';\nimport DeleteAllDialog from './DeleteAllDialog';\nimport DeleteDialog from './DeleteDialog';\n\nconst styles = theme => ({\n    tableHeader: {\n        whiteSpace: 'nowrap',\n        fontWeight: 'bold',\n        fontSize: '80%',\n        padding: '0px 8px'\n    },\n    tableHeaderExtended: {\n        color: theme.palette.type === 'dark' ? theme.palette.primary.light : theme.palette.primary.dark\n    },\n    tableCell: {\n        whiteSpace: 'nowrap',\n        fontSize: '80%',\n        padding: '0px 8px'\n    },\n    tableContainer: {\n        overflow: 'auto',\n        maxHeight: 'calc(100vh - 180px)'\n    },\n    tableTextField: {\n        fontSize: '80%'\n    },\n    tableSelect: {\n        fontSize: '80%'\n    },\n    tableTextFieldContainer: {\n        width: '100%'\n    },\n    tableSelectContainer: {\n        width: '100%'\n    },\n    nonEditMode: {\n        cursor: 'pointer'\n    }\n});\n\nconst DataCell = props => {\n    const sortedItem = props.sortedItem;\n    const field = props.field;\n    const editMode = props.editMode;\n    const setEditMode = props.setEditMode;\n\n    const ref = useRef();\n    /*useEffect(() => {\n         if (props.editMode) {\n             // ref.current && ref.current.focus()\n             //window.setTimeout(() => ref.current && ref.current.focus(), 1000);\n         }\n    }, [props.editMode])*/\n\n    let item = sortedItem.item;\n    let result;\n    if (field.type === 'checkbox') {\n        result = <Tooltip title={I18n.t(field.title)}>\n            <Checkbox\n                inputRef={ref}\n                className={props.classes.tableCheckbox}\n                checked={!!item[field.name]}\n                disabled={props.getDisable(sortedItem.$index, field.name)}\n                onChange={e => props.changeParam(sortedItem.$index, field.name, e.target.checked)}\n            />\n        </Tooltip>;\n    } else if (field.type === 'rooms') {\n        if (!editMode) {\n            result = <TextWithIcon list={props.rooms} value={item[field.name]} themeType={props.themeType}/>;\n        } else {\n            result = <SelectWithIcon\n                list={props.rooms}\n                allowNone={true}\n                value={item[field.name]}\n                dense={true}\n                themeType={props.themeType}\n                inputProps={{ref, className: props.classes.tableSelect}}\n                disabled={props.getDisable(sortedItem.$index, field.name)}\n                onChange={value => props.changeParam(sortedItem.$index, field.name, value)}\n                className={props.classes.tableSelectContainer}\n            />;\n        }\n    } else if (field.type === 'select') {\n        if (!editMode) {\n            let option = field.options.find(option => option.value === item[field.name]);\n            result = option ? option.title : '';\n        } else {\n            result = <Select\n                value={item[field.name]}\n                inputProps={{ref, className: props.classes.tableSelect}}\n                disabled={props.getDisable(sortedItem.$index, field.name)}\n                onChange={e => props.changeParam(sortedItem.$index, field.name, e.target.value)}\n                className={props.classes.tableSelectContainer}\n            >\n                {field.options.map(option =>\n                    <MenuItem key={option.value} value={option.value}>{option.title ? option.title : <i>{I18n.t('Nothing')}</i>}</MenuItem>\n                )}\n            </Select>;\n        }\n    } else {\n        if (!editMode) {\n            result = item[field.name] ? item[field.name] : null;\n        } else {\n            result = <TextField value={item[field.name]} className={props.classes.tableTextFieldContainer}\n                inputProps={{ref: ref, className: props.classes.tableTextField}}\n                type={field.type}\n                onChange={e => props.changeParam(sortedItem.$index, field.name, e.target.value)}\n                disabled={props.getDisable(sortedItem.$index, field.name)}\n            />;\n        }\n    }\n\n    return <TableCell\n        className={Utils.clsx(props.classes.tableCell, !editMode && props.classes.nonEditMode)}\n        onClick={e => {\n            setEditMode(true);\n            window.localStorage.setItem('Modbus.editMode', 'true');\n            window.setTimeout(() => ref.current && ref.current.focus(), 100);\n        }}\n    >\n        {result}\n    </TableCell>;\n}\n\nconst RegisterTable = props => {\n    const [tsvDialogOpen, setTsvDialogOpen] = useState(false);\n    const [editMode, setEditMode] = useState(parseInt(window.localStorage.getItem('Modbus.editMode'), 10) || 0);\n    const [extendedMode, setExtendedMode] = useState(window.localStorage.getItem('Modbus.extendedMode') === 'true');\n    const [deleteAllDialog, setDeleteAllDialog] = useState({\n        open: false,\n        action: null,\n    });\n    const [deleteDialog, setDeleteDialog] = useState({\n        open: false,\n        item: null,\n        action: null,\n    });\n\n    let sortedData = props.getSortedData(props.data, props.orderBy, props.order);\n\n    return <div>\n        <div>\n            <Tooltip title={I18n.t('Add line')}>\n                <IconButton onClick={e => props.addItem()}>\n                    <AddIcon/>\n                </IconButton>\n            </Tooltip>\n            <Tooltip title={I18n.t('Edit as TSV (Tab separated values)')}>\n                <IconButton onClick={() => setTsvDialogOpen(true)}>\n                    <ImportExport/>\n                </IconButton>\n            </Tooltip>\n            <Tooltip title={I18n.t('Toggle extended mode')}>\n                <IconButton\n                    color={extendedMode ? 'primary' : 'inherit'}\n                    onClick={() => {\n                        window.localStorage.setItem('Modbus.extendedMode', extendedMode ? 'false' : 'true');\n                        setExtendedMode(!extendedMode);\n                    }}>\n                    <ExpertIcon/>\n                </IconButton>\n            </Tooltip>\n        </div>\n        <div className={props.classes.tableContainer}>\n            <Table size=\"small\"\n                   stickyHeader\n                   padding=\"none\"\n            >\n                <TableHead>\n                    <TableRow>\n                        {props.fields.filter(item => (extendedMode || !item.expert) && (!props.formulaDisabled || !item.formulaDisabled)).map(field => {\n                            let isChecked = false;\n                            let indeterminate = false;\n                            let trueFound = false;\n                            let falseFound = false;\n                            for (let k in props.data) {\n                                if (props.data[k][field.name]) {\n                                    isChecked = true;\n                                    trueFound = true;\n                                } else {\n                                    isChecked = false;\n                                    falseFound = true;\n                                }\n\n                                if (trueFound && falseFound) {\n                                    indeterminate = true;\n                                    isChecked = false;\n                                    break;\n                                }\n                            }\n\n                            return <TableCell\n                                key={field.name}\n                                style={{width: field.type === 'checkbox' ? 20 : field.width}}\n                                className={Utils.clsx(props.classes.tableHeader, field.expert && props.classes.tableHeaderExtended)}\n                                title={field.tooltip ? I18n.t(field.tooltip) : null}\n                            >\n                                {field.type === 'checkbox' ?\n                                    <Tooltip title={I18n.t('Change all')}>\n                                        <Checkbox\n                                            indeterminate={indeterminate}\n                                            checked={isChecked}\n                                            onChange={e => {\n                                                let newData = JSON.parse(JSON.stringify(props.data));\n                                                newData.forEach(item =>\n                                                    item[field.name] = e.target.checked);\n                                                props.changeData(newData);\n                                            }}\n                                        />\n                                    </Tooltip>\n                                    : null}\n                                {field.sorted ? <TableSortLabel\n                                    active={field.name === props.orderBy}\n                                    direction={props.order}\n                                    onClick={e => {\n                                        const isAsc = props.orderBy === field.name && props.order === 'asc';\n                                        props.onChangeOrder(field.name, isAsc ? 'desc' : 'asc');\n                                    }}\n                                >{I18n.t(field.title)}</TableSortLabel> : I18n.t(field.title)}\n                            </TableCell>\n                        })}\n                        <TableCell>\n                            <Tooltip title={I18n.t('Delete all')}>\n                                <div>\n                                    <IconButton\n                                        size=\"small\"\n                                        onClick={e => setDeleteAllDialog({\n                                            open: true,\n                                            action: () => props.changeData([]),\n                                        })}\n                                        disabled={!props.data.length}\n                                    >\n                                        <DeleteIcon/>\n                                    </IconButton>\n                                </div>\n                            </Tooltip>\n                        </TableCell>\n                    </TableRow>\n                </TableHead>\n                <TableBody>\n                    {\n                        sortedData.map(sortedItem =>\n                            <TableRow hover key={sortedItem.$index}>\n                                {props.fields.filter(item => (extendedMode || !item.expert) && (!props.formulaDisabled || !item.formulaDisabled)).map(field =>\n                                    <DataCell\n                                        key={field.name}\n                                        themeType={props.themeType}\n                                        sortedItem={sortedItem}\n                                        field={field}\n                                        editMode={editMode === sortedItem.$index}\n                                        rooms={props.rooms}\n                                        setEditMode={() => setEditMode(sortedItem.$index)}\n                                        {...props}\n                                    />\n                                )}\n                                <TableCell>\n                                    <Tooltip title={I18n.t('Delete')}>\n                                        <div>\n                                            <IconButton size=\"small\" onClick={e => {\n                                                let lastTime = window.sessionStorage.getItem('disableDeleteDialogs');\n                                                if (lastTime && (new Date() - new Date(lastTime)) < 1000 * 60 * 5) {\n                                                    props.deleteItem(sortedItem.$index);\n                                                    return;\n                                                }\n                                                setDeleteDialog({\n                                                    open: true,\n                                                    action: disableDialogs => {\n                                                        if (disableDialogs) {\n                                                            window.sessionStorage.setItem('disableDeleteDialogs', (new Date()).toISOString());\n                                                        }\n                                                        props.deleteItem(sortedItem.$index);\n                                                    },\n                                                    item: sortedItem.item\n                                                })\n                                            }}>\n                                                <DeleteIcon/>\n                                            </IconButton>\n                                        </div>\n                                    </Tooltip>\n                                </TableCell>\n                            </TableRow>\n                        )\n                    }\n                </TableBody>\n            </Table>\n        </div>\n        {tsvDialogOpen ?\n            <TsvDialog\n                open={true}\n                save={data => {\n                    if (props.prefix) {\n                        data.forEach(line => {\n                            line.Address = (line.Address || '').toUpperCase();\n                            if (line.Address && !line.Address.startsWith(props.prefix)) {\n                                line.Address = props.prefix + line.Address;\n                            }\n                        });\n                    }\n                    props.changeData(data);\n                }}\n                onClose={() => setTsvDialogOpen(false)}\n                data={props.data}\n                fields={props.fields}\n            /> : null\n        }\n        <DeleteAllDialog\n            open={deleteAllDialog.open}\n            action={deleteAllDialog.action}\n            onClose={() => setDeleteAllDialog({\n                open: false,\n                action: null,\n            })}\n        />\n        <DeleteDialog\n            open={deleteDialog.open}\n            action={deleteDialog.action}\n            onClose={() => setDeleteDialog({\n                open: false,\n                action: null,\n                item: null\n            })}\n            item={deleteDialog.item}\n        />\n    </div>;\n}\n\nRegisterTable.propTypes = {\n    data: PropTypes.array,\n    fields: PropTypes.array,\n    classes: PropTypes.object,\n    addItem: PropTypes.func,\n    changeData: PropTypes.func,\n    deleteItem: PropTypes.func,\n    rooms: PropTypes.object,\n    formulaDisabled: PropTypes.bool,\n    getSortedData: PropTypes.func,\n    themeType: PropTypes.string,\n    prefix: PropTypes.string,\n};\n\nexport default withStyles(styles)(RegisterTable);","import {Component} from 'react';\nimport PropTypes from 'prop-types';\n\nimport Paper from '@material-ui/core/Paper';\n\nimport roles from '../data/roles';\nimport types from '../data/types';\n\nimport I18n from '@iobroker/adapter-react/i18n';\n\nimport RegisterTable from '../Components/RegisterTable';\n\nclass BaseRegisters extends Component {\n    constructor(props) {\n        super(props);\n        this.nativeField = '';\n        this.state = {\n            order: window.localStorage.getItem('Modbus.order') || 'asc',\n            orderBy: window.localStorage.getItem('Modbus.orderBy') || 'Address',\n        };\n    }\n\n    getRooms() {\n        const lang = I18n.getLanguage();\n        return this.props.rooms ? Object.values(this.props.rooms).map(room => ({\n            value: room._id,\n            title: typeof room.common.name === 'object' ? room.common.name[lang] : room.common.name\n        })) : [];\n    }\n\n    getFields() {\n        let rooms = this.getRooms();\n        rooms.unshift({value: '', title: ''});\n\n        let result = [\n            {name: 'Address', title: 'Address', type: 'text', sorted: true, width: 20},\n            {name: 'Name', title: 'Name', type: 'text', sorted: true},\n            {name: 'Description', title: 'Description', type: 'text', sorted: true},\n            {name: 'Type', title: 'Type', type: 'select', options: types, sorted: true},\n            {name: 'Length', title: 'Length', type: 'text', width: 20},\n            {name: 'Unit', title: 'Unit', type: 'text', width: 30},\n            {name: 'Role', title: 'Role', type: 'select', options: roles, sorted: true},\n            {name: 'Room', title: 'Room', type: 'rooms', options: rooms, sorted: true},\n            {name: 'poll', title: 'Poll', type: 'checkbox'},\n            {name: 'RW', title: 'RW', type: 'checkbox', expert: true},\n            {name: 'WP', title: 'WP', type: 'checkbox', expert: true},\n        ]\n\n        if (this.props.native.params.multiDeviceId) {\n            result.splice(1, 0,\n                {name: 'deviceId', title: 'Slave ID', type: 'number', sorted: true, width: 20},\n            );\n        }\n\n        return result;\n    }\n\n    address2struct(address) {\n        if (this.nativeField === 'dbs') {\n            const parts = address.split(' ');\n            const db = parseInt(parts[0].replace('DB', '').replace('db', '').trim(), 10);\n            if (parts[1] && parts[1].includes('.')) {\n                const a = parseFloat(parts[1]);\n                return {db, byte: Math.floor(a), bit: (a * 10) % 10};\n            } else {\n                return {db, byte: parseInt(parts[1], 10)};\n            }\n        } else {\n            if (address.includes('.')) {\n                const a = parseFloat(address);\n                return {byte: Math.floor(a), bit: (a * 10) % 10};\n            } else {\n                return {byte: parseInt(address, 10)};\n            }\n        }\n    }\n\n    struct2address(struct) {\n        if (struct.db !== undefined) {\n            if (struct.bit !== undefined) {\n                return `DB${struct.db} ${struct.byte}.${struct.bit}`;\n            } else  {\n                return `DB${struct.db} ${struct.byte}`;\n            }\n        } else if (struct.bit !== undefined) {\n            return struct.byte + '.' + struct.bit;\n        } else  {\n            return struct.byte;\n        }\n    }\n\n    changeParam = (index, name, value) => {\n        let data = JSON.parse(JSON.stringify(this.props.native[this.nativeField]));\n        data[index][name] = value;\n        if (name === 'Type') {\n            if (['BOOL'].includes(value)) {\n                data[index].Length = 0.1;\n            } else\n            if (['', 'BYTE'].includes(value)) {\n                data[index].Length = 1;\n            } else\n            if (['WORD', 'INT', 'STRING', 'S5TIME'].includes(value)) {\n                data[index].Length = 2;\n            } else\n            if (['DWORD', 'DINT', 'REAL'].includes(value)) {\n                data[index].Length = 4;\n            } else\n            if (['S7TIME'].includes(value)) {\n                data[index].Length = 8;\n            } else\n            if (['S7STRING', 'ARRAY'].includes(value)) {\n                data[index].Length = 32;\n            }\n\n            if (value === 'BOOL') {\n                const struct = this.address2struct(data[index].Address);\n                if (struct.bit === undefined) {\n                    struct.bit = 0;\n                    data[index].Address = this.struct2address(struct);\n                }\n            } else {\n                const struct = this.address2struct(data[index].Address);\n                if (struct.bit !== undefined) {\n                    if (struct.bit > 0) {\n                        struct.byte++;\n                    }\n                    delete struct.bit;\n\n                    data[index].Address = this.struct2address(struct);\n                }\n            }\n        }\n        this.props.onChange(this.nativeField, data);\n    }\n\n    addItem = () => {\n        let data = JSON.parse(JSON.stringify(this.props.native[this.nativeField]));\n        let newItem = {}\n\n        this.getFields().forEach(field => newItem[field.name] = '');\n\n        if (data.length) {\n            let sortedData = JSON.parse(JSON.stringify(data));\n            sortedData.sort((item1, item2) => item1.Address > item2.Address ? 1 : -1);\n            let lastItem = sortedData[sortedData.length - 1];\n            const struct = this.address2struct(lastItem.Address);\n            if (lastItem.Type === 'BOOL') {\n                struct.bit = struct.bit || 0;\n                struct.bit++;\n                if (struct.bit >= 8) {\n                    struct.bit = struct.bit % 8;\n                    struct.byte++;\n                }\n            } else {\n                delete struct.bit;\n                struct.byte += lastItem.Length;\n            }\n\n            if (struct.db !== undefined && struct.byte + lastItem.Length > 0xFFFF) {\n                struct.db++;\n                struct.byte = 0;\n                if (lastItem.Type === 'BOOL') {\n                    struct.bit = 0;\n                }\n            }\n\n            newItem.Address = this.struct2address(struct);\n            newItem.Type = lastItem.Type;\n            newItem.Length = lastItem.Length;\n            newItem.Unit = lastItem.Unit;\n            newItem.Role = lastItem.Role;\n            newItem.Room = lastItem.Room;\n            newItem.poll = lastItem.poll;\n            newItem.RW = lastItem.RW;\n            newItem.WP = lastItem.WP;\n        } else {\n            newItem.role = 'level';\n            newItem.Type = 'BOOL';\n            newItem.Length = '0.1';\n            newItem.poll = true;\n            if (this.nativeField === 'dbs') {\n                newItem.Address = 'DB1 0.0';\n            } else {\n                newItem.Address = '0.0';\n            }\n        }\n        data.push(newItem);\n        this.props.onChange(this.nativeField, data);\n    }\n\n    deleteItem = (index) => {\n        let data = JSON.parse(JSON.stringify(this.props.native[this.nativeField]));\n        data.splice(index, 1);\n        this.props.onChange(this.nativeField, data);\n    }\n\n    changeData = (data) => {\n        this.props.onChange(this.nativeField, data);\n    }\n\n    getDisable = (index, name) => {\n        return name === 'Length' &&\n            !['STRING', 'S7STRING', 'ARRAY'].includes(this.props.native[this.nativeField][index].type);\n    }\n\n    getSortedData = (data, orderBy, order) => {\n        this.fields = this.fields || this.getFields();\n\n        data = data || this.props.native[this.nativeField];\n        orderBy = orderBy || this.state.orderBy;\n        order = order || this.state.order;\n        let sortedData = [];\n        data.forEach((item, index) => {sortedData[index] = {item, $index: index}});\n        const field = this.fields.find(item => item.name === orderBy);\n\n        sortedData.sort((sortedItem1, sortedItem2) => {\n            let sort1;\n            let sort2;\n            if (orderBy === 'Address') {\n                const a1 = this.address2struct(sortedItem1.item.Address);\n                const a2 = this.address2struct(sortedItem2.item.Address);\n\n                sort1 = 0;\n                if (a1.db !== undefined) {\n                    sort1 = a1.db << 24;\n                }\n                if (a2.db !== undefined) {\n                    sort2 = a2.db << 24;\n                }\n                sort1 |= a1.byte << 8;\n                sort2 |= a2.byte << 8;\n                sort1 |= a1.bit || 0;\n                sort2 |= a2.bit || 0;\n            } else if (orderBy === '$index') {\n                sort1 = sortedItem1[orderBy];\n                sort2 = sortedItem2[orderBy];\n            } else if (field && field.type === 'number') {\n                sort1 = parseInt(sortedItem1.item[orderBy], 10);\n                sort2 = parseInt(sortedItem2.item[orderBy], 10);\n            } else {\n                sort1 = sortedItem1.item[orderBy];\n                sort2 = sortedItem2.item[orderBy];\n            }\n            return (order === 'asc' ? sort1 > sort2 : sort1 < sort2) ? 1 : -1;\n        });\n\n        return sortedData;\n    }\n\n    render() {\n        this.fields = this.fields || this.getFields();\n\n        return <Paper>\n            <RegisterTable\n                prefix={this.nativeField === 'dbs' ? 'DB' : ''}\n                fields={this.fields}\n                getSortedData={this.getSortedData}\n                data={this.props.native[this.nativeField]}\n                changeParam={this.changeParam}\n                addItem={this.addItem}\n                deleteItem={this.deleteItem}\n                changeData={this.changeData}\n                getDisable={this.getDisable}\n                themeType={this.props.themeType}\n                rooms={this.props.rooms}\n                order={this.state.order}\n                orderBy={this.state.orderBy}\n                onChangeOrder={(orderBy, order) => {\n                    this.setState({orderBy, order});\n                    window.localStorage.setItem('Modbus.orderBy', orderBy);\n                    window.localStorage.setItem('Modbus.order', order);\n                }}\n            />\n        </Paper>\n    }\n}\n\nBaseRegisters.propTypes = {\n    common: PropTypes.object.isRequired,\n    native: PropTypes.object.isRequired,\n    instance: PropTypes.number.isRequired,\n    adapterName: PropTypes.string.isRequired,\n    onError: PropTypes.func,\n    onLoad: PropTypes.func,\n    onChange: PropTypes.func,\n    changed: PropTypes.bool,\n    socket: PropTypes.object.isRequired,\n    themeType: PropTypes.string,\n};\n\nexport default BaseRegisters;\n","import PropTypes from 'prop-types';\n\nimport BaseRegisters from './BaseRegisters';\n\nclass Inputs extends BaseRegisters {\n    nativeField = 'inputs'\n}\n\nInputs.propTypes = {\n    common: PropTypes.object.isRequired,\n    native: PropTypes.object.isRequired,\n    instance: PropTypes.number.isRequired,\n    adapterName: PropTypes.string.isRequired,\n    onError: PropTypes.func,\n    onLoad: PropTypes.func,\n    onChange: PropTypes.func,\n    changed: PropTypes.bool,\n    socket: PropTypes.object.isRequired,\n};\n\nexport default Inputs;\n","import PropTypes from 'prop-types';\n\nimport BaseRegisters from './BaseRegisters';\n\nclass Outputs extends BaseRegisters {\n    nativeField = 'outputs'\n}\n\nOutputs.propTypes = {\n    common: PropTypes.object.isRequired,\n    native: PropTypes.object.isRequired,\n    instance: PropTypes.number.isRequired,\n    adapterName: PropTypes.string.isRequired,\n    onError: PropTypes.func,\n    onLoad: PropTypes.func,\n    onChange: PropTypes.func,\n    changed: PropTypes.bool,\n    socket: PropTypes.object.isRequired,\n};\n\nexport default Outputs;\n","import PropTypes from 'prop-types';\n\nimport BaseRegisters from './BaseRegisters';\n\nclass Marker extends BaseRegisters {\n    nativeField = 'markers'\n}\n\nMarker.propTypes = {\n    common: PropTypes.object.isRequired,\n    native: PropTypes.object.isRequired,\n    instance: PropTypes.number.isRequired,\n    adapterName: PropTypes.string.isRequired,\n    onError: PropTypes.func,\n    onLoad: PropTypes.func,\n    onChange: PropTypes.func,\n    changed: PropTypes.bool,\n    socket: PropTypes.object.isRequired,\n};\n\nexport default Marker;\n","import PropTypes from 'prop-types';\n\nimport BaseRegisters from './BaseRegisters';\n\nclass Dbs extends BaseRegisters {\n    nativeField = 'dbs';\n}\n\nDbs.propTypes = {\n    common: PropTypes.object.isRequired,\n    native: PropTypes.object.isRequired,\n    instance: PropTypes.number.isRequired,\n    adapterName: PropTypes.string.isRequired,\n    onError: PropTypes.func,\n    onLoad: PropTypes.func,\n    onChange: PropTypes.func,\n    changed: PropTypes.bool,\n    socket: PropTypes.object.isRequired,\n};\n\nexport default Dbs;\n","import React from 'react';\nimport {withStyles} from '@material-ui/core/styles';\nimport { MuiThemeProvider } from '@material-ui/core/styles';\nimport { SnackbarProvider } from 'notistack';\n\nimport AppBar from '@material-ui/core/AppBar';\nimport Tabs from '@material-ui/core/Tabs';\nimport Tab from '@material-ui/core/Tab';\n\nimport GenericApp from '@iobroker/adapter-react/GenericApp';\nimport Loader from '@iobroker/adapter-react/Components/Loader'\nimport I18n from '@iobroker/adapter-react/i18n';\n\nimport TabOptions from './Tabs/Options';\nimport TabInputs from './Tabs/Inputs';\nimport TabOutputs from './Tabs/Outputs';\nimport TabMarker from './Tabs/Marker';\nimport TabDbs from './Tabs/DBs';\n\nconst styles = theme => ({\n    root: {},\n    tabContent: {\n        padding: 10,\n        height: 'calc(100% - 64px - 48px - 20px)',\n        overflow: 'auto',\n    },\n    tabContentIFrame: {\n        padding: 10,\n        height: 'calc(100% - 64px - 48px - 20px - 38px)',\n        overflow: 'auto'\n    },\n    tab: {\n        width: '100%',\n        minHeight: '100%'\n    }\n});\n\nconst tabs = [\n    {\n        name: 'general',\n        title: 'General',\n        component: TabOptions,\n    },\n    {\n        name: 'inputs',\n        title: 'Inputs',\n        component: TabInputs,\n    },\n    {\n        name: 'outputs',\n        title: 'Outputs',\n        component: TabOutputs,\n    },\n    {\n        name: 'marker',\n        title: 'Marker',\n        component: TabMarker,\n    },\n    {\n        name: 'dbs',\n        title: 'DBs',\n        component: TabDbs,\n    },\n]\n\nclass App extends GenericApp {\n    constructor(props) {\n        const extendedProps = {...props};\n        extendedProps.encryptedFields = ['pass'];\n\n        extendedProps.translations = {\n            'en': require('./i18n/en'),\n            'de': require('./i18n/de'),\n            'ru': require('./i18n/ru'),\n            'pt': require('./i18n/pt'),\n            'nl': require('./i18n/nl'),\n            'fr': require('./i18n/fr'),\n            'it': require('./i18n/it'),\n            'es': require('./i18n/es'),\n            'pl': require('./i18n/pl'),\n            'zh-cn': require('./i18n/zh-cn'),\n        };\n\n        super(props, extendedProps);\n        this.state.moreLoaded = false;\n        this.state.rooms = null;\n    }\n\n    onConnectionReady() {\n        super.onConnectionReady()\n        this.socket.getForeignObjects('enum.rooms.*', 'enum')\n            .then(rooms =>\n                this.setState({moreLoaded: true, rooms}));\n    }\n\n    getSelectedTab() {\n        const selectedTab = this.state.selectedTab;\n        if (!selectedTab) {\n            return 0;\n        } else {\n            return tabs.findIndex(tab => tab.name === selectedTab);\n        }\n    }\n\n    render() {\n        if (!this.state.loaded || !this.state.moreLoaded) {\n            return <MuiThemeProvider theme={this.state.theme}>\n                <Loader theme={this.state.themeType} />\n            </MuiThemeProvider>;\n        }\n\n        return <MuiThemeProvider theme={this.state.theme}>\n            <SnackbarProvider>\n                <div className=\"App\" style={{background: this.state.theme.palette.background.default, color: this.state.theme.palette.text.primary}}>\n                    <AppBar position=\"static\">\n                        <Tabs\n                            value={this.getSelectedTab()}\n                            onChange={(e, index) => this.selectTab(tabs[index].name, index)}\n                            variant=\"scrollable\" scrollButtons=\"auto\">\n                            {tabs.map(tab => <Tab\n                                label={tab.icon ? <>{tab.icon}{I18n.t(tab.title)}</> : I18n.t(tab.title)}\n                                data-name={tab.name}\n                                key={tab.name}\n                                title={tab.tooltip ? I18n.t(tab.tooltip) : undefined}\n                            />)}\n                        </Tabs>\n                    </AppBar>\n                    <div className={this.isIFrame ? this.props.classes.tabContentIFrame : this.props.classes.tabContent}>\n                        {tabs.map((tab, index) => {\n                            const TabComponent = tab.component;\n                            if (this.state.selectedTab) {\n                                if (this.state.selectedTab !== tab.name) {\n                                    return null;\n                                }\n                            } else {\n                                if (index !== 0) {\n                                    return null;\n                                }\n                            }\n                            return <TabComponent\n                                key={tab.name}\n                                themeType={this.state.themeType}\n                                common={this.common}\n                                socket={this.socket}\n                                native={this.state.native}\n                                onError={text => this.setState({errorText: (text || text === 0) && typeof text !== 'string' ? text.toString() : text})}\n                                onLoad={native => this.onLoadConfig(native)}\n                                instance={this.instance}\n                                adapterName={this.adapterName}\n                                changed={this.state.changed}\n                                onChange={(attr, value, cb) => this.updateNativeValue(attr, value, cb)}\n                                changeNative={value => this.setState({native: value, changed: this.getIsChanged(value)})}\n                                rooms={this.state.rooms}\n                            />\n                        })}\n                        {/*<pre>{JSON.stringify(this.state.native, null, 2)}</pre>*/}\n                    </div>\n                    {this.renderError()}\n                    {this.renderSaveCloseButtons()}\n                </div>\n            </SnackbarProvider>\n        </MuiThemeProvider>;\n    }\n}\n\nexport default withStyles(styles)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport * as Sentry from '@sentry/browser';\nimport * as SentryIntegrations from '@sentry/integrations';\nimport { MuiThemeProvider} from '@material-ui/core/styles';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {version} from '../package.json';\nimport theme from '@iobroker/adapter-react/Theme';\nimport Utils from '@iobroker/adapter-react/Components/Utils';\n\nwindow.adapterName = 's7';\nlet themeName = Utils.getThemeName();\n\nconsole.log(`iobroker.${window.adapterName}@${version} using theme \"${themeName}\"`);\n\nfunction build() {\n    return ReactDOM.render(\n        <MuiThemeProvider theme={theme(themeName)}>\n            <App\n                onThemeChange={_theme => {\n                    themeName = _theme;\n                    build();\n                }}\n            />\n        </MuiThemeProvider>,\n        document.getElementById('root')\n    );\n}\n\nif (false && window.location.host !== 'localhost:3000') {\n    Sentry.init({\n        dsn: 'https://5ad729dbed504d15aa8bde423cae9a8e@sentry.iobroker.net/57',\n        release: `iobroker.${window.adapterName}@${version}`,\n        integrations: [\n            new SentryIntegrations.Dedupe()\n        ]\n    });\n}\n\nbuild();\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}